# run test with python -m doctest -v ./tests/101-lazy_matrix_mul.txt

First import method to test
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

SUCCESS CASES:

Test signed and unsigned ints and floats in same size lists in list matrix:
     >>> m_a = [[1, 2], [3, 4]]
     >>> m_b = [[2, 0], [1, 2]]
     >>> print(lazy_matrix_mul(m_a, m_b))
     [[ 4  4]
      [10  8]]

     >>> m_a = [[-2.0, -3.0]]
     >>> m_b = [[-2.0], [-4.0]]
     >>> print(lazy_matrix_mul(m_a, m_b))
     [[16.]]


FAIL CASES:
Test empty matrix:
     >>> m_a = []
     >>> m_b = [[2, 0], [1, 2]]
     >>> print(lazy_matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)

     >>> m_a = [[2, 0], [1, 2]]
     >>> m_b = []
     >>> print(lazy_matrix_mul(m_a, m_b))
     Traceback (most recent call last):
     ...
     ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 0 is different from 2)


Test matrix with other data types:
     >>> m_a = [["hey"], ["you"]]
     >>> print(lazy_matrix_mul(m_a, m_a))
     Traceback (most recent call last):
     ...
     numpy.core._exceptions._UFuncNoLoopError: ufunc 'matmul' did not contain a loop with signature matching types (dtype('<U3'), dtype('<U3')) -> None