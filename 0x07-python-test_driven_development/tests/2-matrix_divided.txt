# run test with python -m doctest -v ./tests/2-matrix_divided.txt

First import method to test
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Success CASES:
Test with int, float and same size lists:
    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    >>> print(matrix_divided([[2,4,6]],2))
    [[1.0, 2.0, 3.0]]

    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    >>> print(matrix_divided(matrix,3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    >>> print(matrix_divided(matrix, float("inf")))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

FAIL CASES:
Test wrong divider:
    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    >>> print(matrix_divided(matrix,0))
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

    >>> matrix = [[1, 2, 3],[4, 5, 6]]
    >>> print(matrix_divided(matrix,"1"))
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Test different size of list in matrix:
    >>> matrix = [[1, 2, 3],[4, 5]]
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix = [[1, 2, 3],[4, 5, 6], [7]]
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test empty lists:
    >>> matrix = []
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[], []]
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test matrix not a list:
    >>> matrix = ((1,2,3))
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = "1,2,3"
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test extra args:
    >>> matrix = [[1,2,3]]
    >>> print(matrix_divided(matrix,1, "test"))
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Test too few args:
    >>> matrix = [[1,2,3]]
    >>> print(matrix_divided(matrix))
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Test matrix with wrong data type:
    >>> matrix = [(1,2,3)]
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[1,3],1]
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[1, 2], [3, (4, 5)]]
    >>> print(matrix_divided(matrix,1))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats